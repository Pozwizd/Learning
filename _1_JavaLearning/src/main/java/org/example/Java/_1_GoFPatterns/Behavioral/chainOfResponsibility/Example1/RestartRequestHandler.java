package org.example.Java._1_GoFPatterns.Behavioral.chainOfResponsibility.Example1;

/**
 * Класс {@code RestartRequestHandler} является конечным обработчиком
 * в цепочке обязанностей для данного примера. Он отвечает за имитацию
 * завершения процесса обновления, когда требуется перезагрузка.
 * Этот обработчик не передает запрос дальше, так как он является последним
 * в последовательности действий, связанных с обновлением и перезагрузкой.
 */
public class RestartRequestHandler implements RequestHandler {
    /**
     * Ссылка на следующий обработчик в цепочке.
     * В данном случае, этот обработчик является конечным, поэтому {@code next}
     * обычно будет {@code null} или не будет использоваться.
     */
    private RequestHandler next;

    /**
     * Устанавливает следующего обработчика в цепочке.
     *
     * @param handler Следующий обработчик запроса.
     */
    @Override
    public void setNext(RequestHandler handler) {
        this.next = handler;
    }

    /**
     * Обрабатывает запрос, сигнализируя об успешном завершении процесса обновления.
     * Этот метод выводит сообщение о том, что обновление прошло успешно,
     * и не передает запрос дальше по цепочке.
     *
     * @param request Объект запроса, который необходимо обработать.
     */
    @Override
    public void handleRequest(Request request) {
        System.out.println("Обновление прошло успешно");
        // Этот обработчик является конечным, поэтому запрос не передается дальше.
        // В реальных сценариях здесь могут быть дополнительные действия,
        // например, логирование завершения процесса или уведомление пользователя.
    }
}