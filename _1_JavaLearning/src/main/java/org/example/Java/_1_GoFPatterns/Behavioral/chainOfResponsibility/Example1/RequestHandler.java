package org.example.Java._1_GoFPatterns.Behavioral.chainOfResponsibility.Example1;

/**
 * Интерфейс {@code RequestHandler} определяет контракт для обработчиков в цепочке.
 * Каждый обработчик должен уметь устанавливать следующего обработчика в цепочке
 * и обрабатывать запрос. Это ключевой элемент паттерна "Цепочка обязанностей",
 * позволяющий динамически строить последовательность обработчиков.
 */
public interface RequestHandler {
    /**
     * Устанавливает следующего обработчика в цепочке.
     * Это позволяет формировать цепочку, где каждый обработчик знает,
     * кому передать запрос, если он не может обработать его сам.
     *
     * @param handler Следующий обработчик запроса.
     */
    void setNext(RequestHandler handler);

    /**
     * Обрабатывает входящий запрос.
     * Реализация этого метода в конкретных обработчиках определяет логику
     * обработки запроса и решение о передаче его следующему обработчику.
     *
     * @param request Объект запроса, который необходимо обработать.
     */
    void handleRequest(Request request);
}