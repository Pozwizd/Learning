package org.example.Java._1_GoFPatterns.Behavioral.chainOfResponsibility.Example1;

/**
 * Класс {@code ChainOfResponsibilityClient} демонстрирует использование
 * паттерна "Цепочка обязанностей". Он создает экземпляры различных обработчиков,
 * настраивает их последовательность (цепочку) и инициирует обработку запроса.
 * Этот класс выступает в роли клиента, который отправляет запрос первому
 * обработчику в цепочке, не зная, какой именно обработчик будет его обрабатывать.
 */
public class ChainOfResponsibilityClient {
    /**
     * Главный метод для запуска демонстрации паттерна.
     *
     * @param args Аргументы командной строки (не используются).
     */
    public static void main(String[] args) {
        // 1. Создание экземпляров конкретных обработчиков.
        // Каждый обработчик представляет собой звено в цепочке,
        // выполняющее определенную часть логики обработки запроса.
        RequestHandler handler1 = new CheckUpdatesRequestHandler();
        RequestHandler handler2 = new InstallUpdatesRequestHandler();
        RequestHandler handler3 = new RestartRequestHandler();

        // 2. Настройка цепочки обязанностей.
        // Здесь определяется порядок, в котором запросы будут передаваться
        // от одного обработчика к другому.
        // handler1 -> handler2 -> handler3
        handler1.setNext(handler2); // После проверки обновлений, если они есть, переходим к установке.
        handler2.setNext(handler3); // После установки, если требуется перезагрузка, переходим к перезагрузке.

        // 3. Создание объекта запроса.
        // Запрос содержит информацию, которая будет обрабатываться цепочкой.
        // В данном случае, мы указываем, что требуется проверка обновлений,
        // но перезагрузка не требуется (для первого сценария).
        Request request1 = new Request(true, false);
        System.out.println("--- Сценарий 1: Проверка обновлений (true), Перезагрузка (false) ---");
        handler1.handleRequest(request1); // Отправляем запрос первому обработчику в цепочке.
        System.out.println("---------------------------------------------------------------------\n");

        // 4. Демонстрация другого сценария.
        // Создаем новый запрос, где требуется и проверка обновлений, и перезагрузка.
        Request request2 = new Request(true, true);
        System.out.println("--- Сценарий 2: Проверка обновлений (true), Перезагрузка (true) ---");
        handler1.handleRequest(request2); // Отправляем запрос первому обработчику.
        System.out.println("---------------------------------------------------------------------\n");

        // 5. Демонстрация сценария без обновлений.
        // Создаем запрос, где не требуется проверка обновлений.
        Request request3 = new Request(false, false);
        System.out.println("--- Сценарий 3: Проверка обновлений (false), Перезагрузка (false) ---");
        handler1.handleRequest(request3); // Отправляем запрос первому обработчику.
        System.out.println("---------------------------------------------------------------------\n");
    }
}