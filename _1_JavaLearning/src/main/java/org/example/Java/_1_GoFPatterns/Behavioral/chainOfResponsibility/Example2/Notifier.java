package org.example.Java._1_GoFPatterns.Behavioral.chainOfResponsibility.Example2;

/**
 * Абстрактный класс {@code Notifier} определяет базовую структуру для всех
 * обработчиков в цепочке уведомлений. Он реализует часть логики паттерна
 * "Цепочка обязанностей", управляя приоритетом уведомлений и передачей
 * запросов следующему обработчику.
 */
public abstract class Notifier {
    /**
     * Приоритет, который может обрабатывать данный уведомитель.
     * Уведомления с уровнем, равным или выше этого приоритета, будут обработаны.
     */
    private final int priority;
    /**
     * Ссылка на следующий уведомитель в цепочке.
     * Если текущий уведомитель не может полностью обработать запрос или
     * должен передать его дальше, он использует эту ссылку.
     */
    private Notifier nextNotifier;

    /**
     * Конструктор для создания нового уведомителя с заданным приоритетом.
     *
     * @param priority Приоритет, который может обрабатывать данный уведомитель.
     */
    public Notifier(int priority) {
        this.priority = priority;
    }

    /**
     * Устанавливает следующего уведомителя в цепочке.
     * Это позволяет формировать цепочку, где каждый уведомитель знает,
     * кому передать запрос, если он не может обработать его сам.
     *
     * @param nextNotifier Следующий уведомитель в цепочке.
     */
    public void setNextNotifier(Notifier nextNotifier) {
        this.nextNotifier = nextNotifier;
    }

    /**
     * Метод для обработки уведомления.
     * Если уровень уведомления соответствует или превышает приоритет текущего
     * уведомителя, он выполняет свою специфическую логику (метод {@code write}).
     * Затем, независимо от того, было ли уведомление обработано, оно передается
     * следующему уведомителю в цепочке, если таковой существует.
     *
     * @param message Сообщение уведомления.
     * @param level   Уровень важности уведомления.
     */
    void notifyManager(String message, int level) {
        if (level >= priority) {
            write(message);
        }
        // Всегда передаем запрос дальше, если есть следующий обработчик.
        // Это позволяет нескольким обработчикам в цепочке реагировать на одно и то же уведомление,
        // если их приоритеты соответствуют уровню уведомления.
        if (nextNotifier != null) {
            nextNotifier.notifyManager(message, level);
        }
    }

    /**
     * Абстрактный метод, который должен быть реализован конкретными классами-наследниками.
     * Определяет специфический способ отправки уведомления (например, вывод в консоль,
     * отправка по электронной почте, отправка SMS).
     *
     * @param message Сообщение, которое необходимо отправить.
     */
    abstract void write(String message);
}